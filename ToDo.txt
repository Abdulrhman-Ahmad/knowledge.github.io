Fluent Api

ASP.NET Identity

ASP.NET JWT

Patterns [ Unit Of Work / Generic Repository ]

and the other design patterns

how to use packages Identity JWT bearer 


redis in-memory (remote dictionary server)

Englich Bussiness Networking course

SMTP

SignalR

how to contribute with other open source in github

ask for pull request in the context of contributing with others

how to collaborate on a database using version control in git

what is mapped type in typescript

Promises (Asynchronous Operation)

Search for "What are the Core Features for Javascript?"

What is Redux library?

github => [issues, code review, pull requests]

asynchronous and parallelism

CPU-Intensive VS I/O Intensive Tasks

@for(item of products; track @index){}         // https://angular.io/api/core/for
@for (item of items; track item.id; let idx = $index, e = $even) {
  Item #{{ idx }}: {{ item.name }}
}

export interface Note {
  id: number;
  title: string;
  text: string;
}
export const NOTES: Note[] = [ ... ]

(ngSumbit) => //on forms
<form (ngSubmit)="showName()" #myForm="ngForm">       // We used a reference here!
<input type="submit" value="Submit" [disabled]="!myForm.form.valid" /> // try the form driven tempalte 

// CSS Form Validation Condition 
input.ng-valid {
  background-color: #79ba6a;
}
input.ng-invalid {
  background-color: #f58c84;
}

// Reactive Forms
<input type="text" [formControl]="name" name="name" />      // Create new Form Control

this.loginForm.value.username       // to access the form control syntax

// we have to use ngSubmitFront-End:
      
	  

SSR & SSG   in new version of angular 
AWS

enableProdMode
createCustomElement

how to produce an angular custom elements to use it in any enviroment

changeDetectionStrategy.OnPush

.pipe.tap

Angular Component Standalone and dependency => look for angular updates

@component{
      standalone:,
      imports:[],
}

@for(item of products; track @index){}         // https://angular.io/api/core/for
@for (item of items; track item.id; let idx = $index, e = $even) {
  Item #{{ idx }}: {{ item.name }}
}

export interface Note {
  id: number;
  title: string;
  text: string;
}
export const NOTES: Note[] = [ ... ]

(ngSumbit) => //on forms
<form (ngSubmit)="showName()" #myForm="ngForm">       // We used a reference here!
<input type="submit" value="Submit" [disabled]="!myForm.form.valid" /> // try the form driven tempalte 

// CSS Form Validation Condition 
input.ng-valid {
  background-color: #79ba6a;
}
input.ng-invalid {
  background-color: #f58c84;
}

// Reactive Forms
<input type="text" [formControl]="name" name="name" />      // Create new Form Control

this.loginForm.value.username       // to access the form control syntax

// we have to use ngSubmit
// stand alone and lazy loading 
-- when the router receives a URL, it goes through the configuration in order$$
inject() method from angular/core
different between angular core and cli

//new form of injection 
router = inject(Router);
navigate() {
  this.router.navigateByUrl('/contacts');
}           // Make sure to import inject from core 

$$$$$$$ WebSocket
      // like in gmail updating messages autmatically without cliking on anything like (signalR) I think
      
agile methodologies (Scrum, Kanban).

unit test to add to cv

sql server acid 


What is .NET and what is the differences between the other versions(.NET Framework, .NET Core, .NET)

design pattern is a way to solve an issue what ever  the used programming languge in solving that issue
principle is some thing good that we follow under 
Architicture Style : provide stadards between systems communication

type-checking 
memory allocation
copying


polymorphism (static binding/ dynamic binding)
boxing and Clr

dynamic keyword

the different between class, constructor, and interface

what to do when plannig to design database systems (steps) best practice
what do do when starting building a software application steps and best practice like SLDC
lambda expression & arrow

memory allocation in initialization and declaration of arrays and list
C# Reflections
Dictionary and Dictionary Methods
anonymous
JIT C# Compiler

asp.net core attributes    
how array stored. Sequentially?
concurrency and multithreading
thread class in System.Threading
Union and intersection in C#
classes relations
deferred, eager, lazy, immediate, deferred, explicit 
what is data migration in code first approach
DDD Domain-Driven Design .NET Core
IQueryable, IEnumerable / Eager, Deferred => Use Cases
Cohesion & Coupling
SOLID Principles
Design Patterns Dependency Injection