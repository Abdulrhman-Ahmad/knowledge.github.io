Front-End:
      - HTML
      - CSS
      - Bootstrap
      - JavaScript (ES6+)
      - TypeScript (TS)
      - React
      - Redux
      - jQuery
      - Angular

Back-End:
      - C#
      - Object-Oriented Programming (OOP)
      - ASP.NET Core Web API
      - ASP.NET Core MVC
      - Entity Framework Core
      - ASP.NET MVC
      - SQL Server
      - LinQ
      - Windows Forms
      - Node.js
      - Express.js
      
      - Full Stack:
      - Full-Stack Development

Web Development:
      - Responsive Design
      - Web Accessibility (WCAG)
      - Front-End Build Tools (e.g., Webpack, Babel, Parcel)
      - Testing Libraries/Frameworks (e.g., Jest, Enzyme, React Testing Library)
      - GraphQL

DevOps and Deployment:
      - Version Control (Git)
      - CI/CD (Jenkins, GitLab CI, GitHub Actions)
      - Containerization (Docker)

Database:
      - SQL Server
      - Entity Framework Core
      - NoSQL Databases (e.g., MongoDB, Cassandra)

Server-Side Technologies:
      - ASP.NET Core Web API
      - ASP.NET Core MVC
      - Node.js
      - Express.js

Additional Back-End:
      - Authentication and Authorization (e.g., OAuth, JWT, IdentityServer)
      - WebSockets
      - Microservices Architecture
      - Message Queues (e.g., RabbitMQ, Apache Kafka)
      - Serverless Computing (e.g., AWS Lambda, Azure Functions)

General Development Skills:
      - DevOps and CI/CD
      - Agile/Scrum Methodologies
      - Cloud Platforms (e.g., AWS, Azure, Google Cloud Platform)
      - Automated Testing (e.g., Mocha, Jest, Jasmine)

Other Development Platforms:
      - OutSystems
      - Low-Code Development

Customer Relationship Management (CRM):
      - CRM Systems (e.g., Salesforce, Microsoft Dynamics CRM, HubSpot)
      - Customization and Configuration
      - Workflow Automation
      - Data Management
      - CRM Integrations
      - User Training and Support
      
------------------------------------------------------------------


Fluent Api

ASP.NET Identity

ASP.NET JWT

Patterns [ Unit Of Work / Generic Repository ]

and the other design patterns

how to use packages Identity JWT bearer 

the differences between the hard , soft , and mix Reset 

redis in-memory (remote dictionary server)

Englich Bussiness Networking course

build workshop gallery for you work 

SMTP

SignalR

Host Listener

how to contribute with other open source in github

ask for pull request in the context of contributing with others

typescript projects to do, try catch

how to collaborate on a database using version control in git

what is mapped type in typescript

Promises (Asynchronous Operation)

Search for "What are the Core Features for Javascript?"

What is Redux library?

github => [issues, code review, pull requests]

asynchronous and parallelism

CPU-Intensive VS I/O Intensive Tasks

Angular Component Standalone and dependency => look for angular updates

@component{
      standalone:,
      imports:[],
}

@for(item of products; track @index){}         // https://angular.io/api/core/for
@for (item of items; track item.id; let idx = $index, e = $even) {
  Item #{{ idx }}: {{ item.name }}
}

export interface Note {
  id: number;
  title: string;
  text: string;
}
export const NOTES: Note[] = [ ... ]

(ngSumbit) => //on forms
<form (ngSubmit)="showName()" #myForm="ngForm">       // We used a reference here!
<input type="submit" value="Submit" [disabled]="!myForm.form.valid" /> // try the form driven tempalte 

// CSS Form Validation Condition 
input.ng-valid {
  background-color: #79ba6a;
}
input.ng-invalid {
  background-color: #f58c84;
}

// Reactive Forms
<input type="text" [formControl]="name" name="name" />      // Create new Form Control

this.loginForm.value.username       // to access the form control syntax

// we have to use ngSubmitFront-End:
      - HTML
      - CSS
      - Bootstrap
      - JavaScript (ES6+)
      - TypeScript (TS)
      - React
      - Redux
      - jQuery
      - Angular

Back-End:
      - C#
      - Object-Oriented Programming (OOP)
      - ASP.NET Core Web API
      - ASP.NET Core MVC
      - Entity Framework Core
      - ASP.NET MVC
      - SQL Server
      - LinQ
      - Windows Forms
      - Node.js
      - Express.js
      
      - Full Stack:
      - Full-Stack Development

Web Development:
      - Responsive Design
      - Web Accessibility (WCAG)
      - Front-End Build Tools (e.g., Webpack, Babel, Parcel)
      - Testing Libraries/Frameworks (e.g., Jest, Enzyme, React Testing Library)
      - GraphQL

DevOps and Deployment:
      - Version Control (Git)
      - CI/CD (Jenkins, GitLab CI, GitHub Actions)
      - Containerization (Docker)

Database:
      - SQL Server
      - Entity Framework Core
      - NoSQL Databases (e.g., MongoDB, Cassandra)

Server-Side Technologies:
      - ASP.NET Core Web API
      - ASP.NET Core MVC
      - Node.js
      - Express.js

Additional Back-End:
      - Authentication and Authorization (e.g., OAuth, JWT, IdentityServer)
      - WebSockets
      - Microservices Architecture
      - Message Queues (e.g., RabbitMQ, Apache Kafka)
      - Serverless Computing (e.g., AWS Lambda, Azure Functions)

General Development Skills:
      - DevOps and CI/CD
      - Agile/Scrum Methodologies
      - Cloud Platforms (e.g., AWS, Azure, Google Cloud Platform)
      - Automated Testing (e.g., Mocha, Jest, Jasmine)

Other Development Platforms:
      - OutSystems
      - Low-Code Development

Customer Relationship Management (CRM):
      - CRM Systems (e.g., Salesforce, Microsoft Dynamics CRM, HubSpot)
      - Customization and Configuration
      - Workflow Automation
      - Data Management
      - CRM Integrations
      - User Training and Support
      
------------------------------------------------------------------


Fluent Api

ASP.NET Identity

ASP.NET JWT

Patterns [ Unit Of Work / Generic Repository ]

and the other design patterns

how to use packages Identity JWT bearer 

the differences between the hard , soft , and mix Reset 

redis in-memory (remote dictionary server)

Englich Bussiness Networking course

build workshop gallery for you work 

SMTP

SignalR

Host Listener

how to contribute with other open source in github

ask for pull request in the context of contributing with others

typescript projects to do, try catch

how to collaborate on a database using version control in git

what is mapped type in typescript

Promises (Asynchronous Operation)

Search for "What are the Core Features for Javascript?"

What is Redux library?

github => [issues, code review, pull requests]

asynchronous and parallelism

CPU-Intensive VS I/O Intensive Tasks
SSR & SSG   in new version of angular 
AWS

enableProdMode
createCustomElement

how to produce an angular custom elements to use it in any enviroment

changeDetectionStrategy.OnPush

.pipe.tap

Angular Component Standalone and dependency => look for angular updates

@component{
      standalone:,
      imports:[],
}

@for(item of products; track @index){}         // https://angular.io/api/core/for
@for (item of items; track item.id; let idx = $index, e = $even) {
  Item #{{ idx }}: {{ item.name }}
}

export interface Note {
  id: number;
  title: string;
  text: string;
}
export const NOTES: Note[] = [ ... ]

(ngSumbit) => //on forms
<form (ngSubmit)="showName()" #myForm="ngForm">       // We used a reference here!
<input type="submit" value="Submit" [disabled]="!myForm.form.valid" /> // try the form driven tempalte 

// CSS Form Validation Condition 
input.ng-valid {
  background-color: #79ba6a;
}
input.ng-invalid {
  background-color: #f58c84;
}

// Reactive Forms
<input type="text" [formControl]="name" name="name" />      // Create new Form Control

this.loginForm.value.username       // to access the form control syntax

// we have to use ngSubmit
// stand alone and lazy loading 
-- when the router receives a URL, it goes through the configuration in order$$
inject() method from angular/core
different between angular core and cli

//new form of injection 
router = inject(Router);
navigate() {
  this.router.navigateByUrl('/contacts');
}           // Make sure to import inject from core 

$$$$$$$ WebSocket
      // like in gmail updating messages autmatically without cliking on anything like (signalR) I think
      
agile methodologies (Scrum, Kanban).

unit test to add to cv

sql server acid 
