---------------------------------------------------------------------------
|    |       Web               |     Mobile            |     Desktop      |
|----|-------------------------|-----------------------|------------------|
|    |                         |                       |                  |
|UI  |       [HTML+CSS+JS]     |     [XML + Andriod]   |     WPF          |
|    |                         |                       |                  |
|Code|       C#                |     Java              |     C#           |   
|    |                         |                       |                  |
|DB  |       MSQLS             |     SQLLite           |     SQLExpress   |   
|    |                         |                       |                  |
---------------------------------------------------------------------------

[RESTful API]
	- Is an Interface that two computer systems use to exchange information securely over the internet.
	
[API]
	- (Application Prgramming Interface)
	- Rules that you must follow to communicate with other software systems (actions, endpionts, ...)
	

[Web API]
	- An API that is accessible over the web using stardard web protocols (http/https) 
	- Follow the principles of REST or other architectural styles for web services
	
	[Client]
		- want to access information from the web, like accessing weather data from a weather system
		
	[Resources]
		- the infromation that differet applications provide to their clients
		
	- APIs help them to determine which clients get access to specific internal resources 

[REST]

	- A software architecture that imposes condition on how API should work
	- APIs that follow the REST architectural style are called REST APIs
	- Web Services that implement REST architecture are called RESTful web services
	- The term RESTful API generally refers to RESTfful web APIs and we can use both REST API, RESTful API interchangeably
	
	
	[REST Principles]
		
		- [Stateless Communication]
			- all the information needed to understand and fulfill that request must be provided on every request
		
		- [Uniform Interface]
			- the server transfer data in a standard format, like storing data as text but send it in an html representation format
			
			- [Uniform interface imposes four architectural]                                                  
				- Request should identify resources, they do so by using a uniform resource identifier URI / (URL + URN), Uniform Resource Identifier/Locator/Name
					- 'https://example.com/api/books/123'
				- Clients have enough information in the resource representation to modify or delete the resource if they want to
					- {"id":12, "title":"somethine"}	response body 
				- Self-Descriptive message and metadata
					- the server include metadata in the HTTP headers to make the response self-descriptive. For example, the 'Content-Type'
					- HTTP/1.1 200 OK     Content-Type: application/json
					
				- Infromation about Processing Representations
					- the server might include additinoal information in the headers such as how long the client can cache the response
					- HTTP/1.1 200 OK     Content-Type: application/json      Cache-Control: max-age=3600
					
				- Hyperlinks and Dynamic Resource Discovery
					- the server could include hyperlinks to related resources for instance, it might provide a linke to the author's details or similar books
		
		[Layered system]
			- the client can connect to other authorized intermediaries between the client and server, and it will still receive responses from the server

		[Cacheability]
			- RESTful web services support caching, which is the process of storing some responses on the client or on an intermediary to improve server response time
			
		[Code on demand]
			- servers can temporarily extend or custmomize client functinoality by transferring software programming code to the client
			- like validation on the client side which is a code sent by the server 
				
				
	[Why RESTful APIs]
		- [Scalability] [Flexibility] [Independence]
	
	
	[RESTful APIs workflow]
		- client sends request to the server 
		- server authenticates the client and comfirms that the client has the right to make that request 
		- the server receives the request and processes it internally
		- the server returns a response to the client 

		
	[RESTful API client request contain]
		
		- [Request Line]
			- 'GET /example/resource HTTP/1.1'
		
			- [URI]
				- The server identifies each resource with unique resource identifiers, using a URL(Uniform Resource Locator)
				- URL also called a request endpoint			
			
			- [Methods]			
				- GET
				- POST
				- PUT
				- DELETE
				
			-[HTTP Version]
				- e.g, HTTP/1.1
		
		- [HTTP Headers]
			- Data      
				- might include data for the POST, PUT, and other HTTP methods to work successfully
				
			- Parameters
				- RESTful API can include parameters that give the server more details about what needs to be done
					- Path parameter that specify URL details
					- Query parameters that request more informaion about the resource
					- Cookie parameters that authenticate clients quickly
					
					
	[RESTful API authentication methods]
	
		- [HTTP Authentication]
			
			- [Basic Authentication]
				- the client sends the user name and password in the request header. 
				- It encodes them with base64, which is an encoding technique that converts the pair into a set of 64 characters for safe transmission
			
			- [Bearer Authentication]
				- The process of giving access control to the token bearer.
				- The bearer token is typically an encrypted string of characters that the servergenerates in response to a login request.
				- The client sends the token in the request headers to access resources
				
		- [API Keys]
			- The server assigns a unique generated value to a first-time client.
			- Whenever the client tries to access resources, it uses the unique API Key to verify itself
			- API Key are less secure because the client has to transmit the key, which makes it vulnerable to network theft
			
		- [OAuth]
			- OAuth combines passwords and tokens for highly secure login access to any system.
			- The server first requests a password and then asks for an additional token to complete the authorization process
			- It can check the token at any time and also over time with a specific scope and longevity
			
			
	[RESTful API server response contain]
	
		- [Status Line]
			- 200 Ok (success)
			- 201 Ok (Post method Success)
			- 400 Incorrect request 
			- 404 Resource not found 
		
		- [Message body]
			- Contains the resource representation
			- The server selects an appropriate representation format based on what the request headers contain
			- Clients can request infromation in XML or JSON formats, which define how the data is written in plain text.
			- if the client request the name and age of a person named John, the server returns a JSON {"name":"John","age":30}
			
		- [Header]
			- the resonponse contains metadata about the response
			- Provide more informatino (metadata) such as the server, encoding, date, and content type
			
		- [Additional Info]
			- Could obtain additional information

      
[Web Service]
		- Is a software system that designed to support  interoperable machine-to-machine communication over a network using standard protocols http/https
		- Allow the exchange of data between different platforms and technologies
		- We determine the protocol on pregiven data like:
	  
            - [SOAP] (Simple Object Access Protocol)
				- facilitate communication between different systems over a network, it provides a standarized way 
				- Message are formated using XML(eXtensive Markup Language) 
				- Message consists of SOAP envelop which contains a header and the body
				- <soap.envlop><emp><id>1</id><name>Yousef</name></emp></soap.envlop>
				- Soap have issues with mobile applications(mobile can't handle transferring data in xml file) 
					
            - [REST] (Representational State Transfer)   
				- A Software Architecture that imposes condition on how an API should work
				- Use HTTP/HTTPS to communicate, http have some constraint make it unique
				- Transfer data in JSON format (Light Weight)
				- 

		- the only way to make one code and one database have the ability to communicate with multiple platforms
		
[DLL]
      - Dynamic Link Library, contains compiled code that can be used by one or more programs
	  


      
        
        
in [REST] case :
      
      - definition of service      WSDL
            - metadata of service 
            web sevice description language 
      

definition of service : 
      
      
What is API Application Presentation Interface 

what is diefferent between API and Web API?

what is class library ?

presentation and models + bussiness on the same machine => called API
models + bussness on a seperated server called Web API

what is WCF? before API

WCF   windows *** form
      - issues on 

API .net framework not core version until 2017
from 2017 API Core with Web API

we are working with Restfull WebAPI Core
      - Seperated Backend (.net)
      - Seperated Frontend (Angular/WPF/React/...)

rest is restfull both are the same       
- we have obtain an application and want to open for him another service like payment and logging in in PayPal
      - when we write Amazon.com => front page loads (amazon have a provider contain multiple methods like ShowAll()/Order()/DetailsProduct()/AddRate())
            - for the Payment() action in the amazon when filling the card number to the payment method 
                  - amazon not deal withit but it provide another service that make a check validation service from another server 
                  - each bank provide a WebService like check the cardentitial validation for the card and the balance for that user()
                  - that server is paid not free $$

      B2B bussiness to bussiness like the bank and the amazon
            amazon to the bank is the consumer
            amazon to client is the provider 
            bank to amazon is the provider webService    (B2B) also paid service
      
What is RESTFULL? is an Architectural Style
what is design pattern?
what is the meaning of the principle?

design pattern is a way to solve an issue what ever  the used programming languge in solving that issue
principle is some thing good that we follow under 

Architicture Style : provide stadard between systems communication

To Apply RestFull we have 
      - constraint : we must have  Server / Client -- -- Provider / Consumer
      - constraint :work on Stateless     - what is the meaning of Stateless (state management: like cookie, session, ...)
            - that's why RestFull work on HTTP that apply these constrains
      - constraint :there is a standard format for the messages (Json / XML) but here we use [Json] 
      - constraint : Enable Cache
      - constraint : Uniform Name
            - what is the meaning of Uniform Name?
                  each resource have a unique URL
                        Resource is like a Curd [/Employee - /Department - /.. ] 
                        in the server there are multiple Actions have different methods like [Get/Post/Put/Delete] those called (Verbs)
                        [Client] => URL + Verb => [Server]  $$$
                        Resource is the model and each model have a controller 
     
What is the different of the four Verbs get/post/put/delete?

search for Request Url body header consumer provider

      - between the Consumer and the provider
            - request which contain Header and Body
            [Header]
            - ReqUrl:/Emploee
            - ReqVerb:"post|get|put|delete
            - content-type:application/json -- application/datatype?
            - accept:"Json/Xml"     the type of data that you want to receive in core it send any way json
            
            [Body]
            - contain the data sent with the request 
            
            json object to C# object this process called [Deserilization]
            
      Response
      [Header]
      - ReqUrl:
      - StatusCode:
      
      [Body]
      - containt the reponse data // -- Serilization convert the C# object to json object to put it in the body of the Response
      

Status Code:
      - Success  2xx     200 OK      201 Created       204 NoContent
      - Redirect 3xx
      - Client Error 4xx      404 NotFound      405 MethodNotAllowed    400 BadRequest    401 NotAuthoriezed
      - Server Error 5xx      
      
high level .net web app [blazor] in C#
web app

project name 
      asp.net core web api    restfull http
      
      .net 7
      no authentication type none or jwt
      no configure for https
      
      use controllers   minimal APIs => like microservice
      enable openAPI support     // will install package swashbuckle.appnetcore under the frameworks in the dependencies
what is swaagger?
      do not use top-level statments (to see the main fuction and program)
      
      
there is no wwwroot
if I want to add class library right click on dependencies


[code first]
      - create folder Models                                                 public int Id{get;set;}
      - install ef package    [ .sqlserver / .tools / .design ]    four ways [ ef name convention / data annotation / fluent api / external configuration ]
      
      In MVC EmployeeController inherits from Controller and controller inherits from baseController
      In API EmployeeController inherits from BaseController
      
[ApiController] attribute to let him know that this controller belongs to the MVC
[Route("api/[controller]")]   controller is a token place holder replacable with the name of the controller 
in API there is no default Route for him so we add the attribute of that controller 

there is a generic type for the action result ActionResult<List<Department>>

what is PostMan? 

[HttpGet]   // URL => domain /api/department ===> Get 
public IActionResult GetAll(){
      List<Department> dpts = db.Departments.ToList();
      if(dpets.Count > 0)
      {
            return OK(dpgs);
      }
      else
      {
            return Badrequest();
      }
}

we test on postman/thridller for the first time and then we test on swagger UI
[GttpGet("{id}")] let hiim know that there is an extra segment comming api/department/id  the id segment 

what is model binding ?

what is ModelState?

what is remote validation and ajax call?  $$$

return created in POST Verb

what is different between Find() and FirstOrDefault()
      - find takes primary key only must be unique
      - FirstOrDefault() search for anything whether it primary key or not
      
update is a method in .net 7

what is jwt? (Json Web Token)       like cookie


-------------  [ Day Two ] -------------

return Created()  parameter => string URL / Object
      - we could pass with the object sometihng that makes him able to get the place of the newly created object 
      - it return location for the object that we created 

Binding =>
      
      Url.Link()  parameter => RouteName / Object 
            - returns Url string so we can but it in the return created link segment beside the object 
            - to display or open the location of the newly created file 

      [HttpGet("{Id}"), Name ="GetOne"]
            - the route name for the action that contain this route is "GetOne"
            
      what is the purpose of the ModelBinder? in MVC and in API because there is a different
      ModelBinder=>
            - for Primitive DT => try to find it in the Route DAta / Query String
            - for Compolex DT  => try to find it in the Request body

      [FromBody]
            - when sending a data in the body in Post verb we can receive it by adding the attribute [FromBody] beside the param to let him look inside the body 
            - as long as we tell them a constraint that there is some thing in the body by adding from attribute it will return basd request if the data not found 

      [FromQuery]
            - here it will look to the query string and get the data fro mthe query string with Post Verb
            
      PostMan, Fiddler
            - postman is a composer and good for testing the binding

      IF WE SEND PARAMATER FOR AN OBJECT BUT NOT COMPLETED WE SENT TWO OUT OF THREE 
            - IN MVC IT WILL BIND IT WITH NULL 
            - IN API IT WILL THROW AN ERROR YOU MUST SEND THE SAME PARAMS OF THE OBJECT 

Json Serilization exception for the relational loading infinit cycle 
      - to fix it we can use [JsonIgnore] will not Serialized (not recommended solution)
      - DTO Data Transfer Object is the best practice solution (ViewModel)
            - we create new folder named DTOs and create class, not recommended to use complex data type, we use primitive datatype and then map on them
            - classes EmployeeWithDepartment
            
            
what is the different between find and ...
      
      we define a model for departmant that have a property for the name of the department and a list of string That I will map over the employees and add it to the list of string in the department
      
we're creating a service (provider)
      - now the user for that provider is the (consumer) that use this service (Front-End)
      
What is Ajax Call
      - why return Partial view and use the ajax call with it
      - remote validation 

What is CORS ?
      - app.UseCors(); => have three overloads 
      - builder.Services.AddCors(options=>{options.AddPolicy("MyPolicy", corsPolicyOptions(poption=>{
            poption.WithOrigins("domain").WithMethods("").WithHeaders("");
            
            }))});
we could create a folder called wwwroot and it will automatically take the shape 
      
      
wpf
      -async button_click event 
            - HttpClient httpclient = new HttpClient();
            - await httpclien.GetAsync("URL works with Verb GET");
                  - run the application to get the Url and use it in the previous method
            - HttpResponseMessage res = await httpclient.GetAsync("Url"); - this line instead of the previoud line 
            - if ( res.IsSuccessStatusCode){
                        string msg = await res.Content.ReadAsStringAsync();
                        // we can get the shape of the data that we receive and create the class with the same name of the comming data 
                        create a class that can receive the data and put the properties 
                        list<Departement> depts = JsonSerlizer.Deserialize<List<Department>>(msg);
                        DeptList.ItemSource = depts;
                  }
            